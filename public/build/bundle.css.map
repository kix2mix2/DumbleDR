{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Star.svelte",
    "../../Trial.svelte",
    "../../Vis.svelte"
  ],
  "sourcesContent": [
    "<svelte:head>\n    <link href=\"https://cdn.jsdelivr.net/gh/jspsych/jsPsych@6.1.0/css/jspsych.min.css\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"./build/style.css\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"./build/jspsych.css\" rel=\"stylesheet\" type=\"text/css\">\n</svelte:head>\n\n<script>\n\n    //import settings from \"./settings.json\";\n\n\timport { onMount } from 'svelte';\n    import { scale } from \"svelte/transition\";\n\n    import { color_time, image_time, sort_time, dataset, data, hover, images, projections, ready } from \"./stores.js\";\n    import Vis from \"./Vis.svelte\";\n    import Trial from \"./Trial.svelte\";\n\n    import \"jspsych\";\n    import \"jspsych/plugins/jspsych-html-keyboard-response\";\n    import \"jspsych/plugins/jspsych-html-button-response\";\n    import \"jspsych/plugins/jspsych-survey-text.js\";\n    import \"jspsych/plugins/jspsych-instructions.js\"\n    import \"./jspsych-survey-multi-choice.js\";\n\n    import WeightedList from \"js-weighted-list\";\n    //console.log(WeightedList)\n\n    import {dr_explain, ui, rule_1, rule_3, sort, color, welcome, consent_form, time_text} from \"./instructions.js\";\n\n    //const paths = settings.settings[0].paths;\n\n    const rows = 2;\n    const cols = 4;\n\n    let subject_id = jsPsych.randomization.randomID(15);\n    jsPsych.data.addProperties({\n        subject: subject_id\n\n    });\n    \n    let welcome_block = {\n        type: \"html-button-response\",\n        stimulus: welcome,\n        choices: ['Start Study'],\n        prompt: \"<br><br>\"\n    };\n\n    let consent = {\n        type: \"html-button-response\",\n        stimulus: consent_form,\n        choices: ['I accept!'],\n        prompt: \"<br><br>\"\n    };\n\n    let instructions = {\n        type:'instructions',\n        pages: [dr_explain, ui, rule_1,rule_3, sort, color, time_text],\n        show_clickable_nav: true,\n        show_page_number: true\n    };\n\n    var name = {\n        type: 'survey-text',\n        questions: [\n            {\n                prompt: '<div class=\\\"text-block\\\">Do you want to share your email with us? <br> ' +\n                    'This is only so we can contact you in case we have questions about your user experience and will not be published anywhere. <br>' +\n                    'Leave the input field empty if you don\\'t want to be contacted any further. </div>',\n                columns: 100,  \n                name: 'Name'\n            },\n        ],\n        randomize_question_order: false,\n        prompt: \"<br><br>\"\n    };\n\n    var experience = {\n        type: 'survey-multi-choice',\n        questions: [\n            {\n                prompt: \"<div class='text-block'> <b>What is the highest academic degree you graduated from? </b></div>\",\n                options: ['High School', 'Bachelor','Master','PhD','Other'],\n                horizontal: true,\n                required: true,\n                name: 'degree'\n            },\n            {\n                prompt: \"<div class='text-block'> <b>Where do you primarily work? </b></div>\",\n                options: ['Research / Academia', 'Research / Other','Analysis/STEM work', 'Student','None of the above','Prefer not to say'],\n                horizontal: true,\n                required: true,\n                name: 'job'\n            },\n            {\n                prompt: \"<div class='text-block'> <b>What is your experience with Machine Learning?</b></div>\",\n                options: [\"Never heard of this\", \"I know the basics\", \"I use it in my work\", \"I work in the field\", \"I'm an expert in the field\", \"Prefer not to say\"],\n                horizontal: true,\n                required: true,\n                name: 'ML'\n            },\n            {\n                prompt: \"<div class='text-block'> <b>What is your experience with Information Visualization?</b></div>\",\n                options: [\"Never heard of this\", \"I know the basics\", \"I use it in my work\", \"I work in the field\", \"I'm an expert in the field\", \"Prefer not to say\"],\n                horizontal: true,\n                required: true,\n                name: 'infovis'\n            },\n            {\n                prompt: \"<div class='text-block'> <b>What is your experience with Dimensionality Reduction?</b></div>\",\n                options: [\"Never heard of this\", \"I know the basics\", \"I use it in my work\", \"I propose/research DR techniques\", \"Prefer not to say\"],\n                horizontal: true,\n                required: true,\n                name: 'dr'\n            },\n            {\n                prompt: \"<div class='text-block'> <b>Have you analysed scatterplots before?</b></div>\",\n                options: [\"Never\", \"Yes, but only informally (in newspapers, social media etc.)\", \"I made scatterplots before with my own data\", \"I'm an expert when it comes to scatterplots\", \"Prefer not to say\"],\n                horizontal: true,\n                required: true,\n                name: 'scatter'\n            }\n        ]\n    };\n\n    let step = null;\n\n\n\n    const client = stitch.Stitch.initializeDefaultAppClient('dumbledr-qfkje');\n    const db = client.getServiceClient(stitch.RemoteMongoClient.factory, 'mongodb-atlas').db(\"dumbledr\");\n    const results = db.collection(\"results\");\n    const settings_collection = db.collection(\"settings\");\n\n    let settings// = settings_collection.findOne({}).then(d => settings = d.settings);\n\n    client.auth.loginWithCredential(new stitch.AnonymousCredential())\n        .then(user => settings_collection.findOne({}))\n        .catch(err => console.error(err))\n        .then(d => settings = d.settings);\n\n    // console.log(settings);\n    $: console.log(settings)\n\n    var counts = 1;\n    let choosen_dataset;\n    let choosen_projections;\n\n    let dr_grid = {\n        type: \"html-button-response\",\n        stimulus: () => {\n\n            const wl1 = new WeightedList(settings.map((s, i) => [i, 1 / (1 ** s.dataset_weight), s]));\n            console.log(wl1);\n            choosen_dataset = wl1.peek()[0];\n            const sample1 = choosen_dataset.data;\n\n            const wl = new WeightedList(sample1.paths.map((s, i) => [i, 1 / (1 ** sample1.path_weights[i]), s]));\n            choosen_projections = wl.peek(rows * cols);\n            const sample = choosen_projections.map(d => d.data);\n\n            var dataset = sample1.name;\n            data.load(data, sample, dataset);\n            step = \"dr_grid\";\n\n            return \"<p class='description'>\" + sample1.description + \"</p>\"\n        },\n        choices: ['Rating complete!'],\n        timing_post_trial: 400,\n        on_finish: function(data) {\n            let update = {}\n            update[`settings.${choosen_dataset.key}.dataset_weight`] = 1;\n            client.auth.loginWithCredential(new stitch.AnonymousCredential())\n                    .then(user => settings_collection.updateOne({}, {$inc: update}, { upsert : true }))\n                    .catch(err => console.error(err))\n                    .then(() => {\n                        let update = {};\n                        for (let i = 0, n = choosen_projections.length; i < n; ++i) {\n                            update[`settings.${choosen_dataset.key}.path_weights.${choosen_projections[i].key}`] = 1;                \n                        }\n                        client.auth.loginWithCredential(new stitch.AnonymousCredential())\n                            .then(user => settings_collection.updateOne({}, {$inc: update}, { upsert : true }))\n                            .catch(err => console.error(err))\n                            .then(() => {\n                                client.auth.loginWithCredential(new stitch.AnonymousCredential())\n                                    .then(user => settings_collection.findOne({}))\n                                    .catch(err => console.error(err))\n                                    .then(d => settings = d.settings);\n                            });\n                    });\n\n            /* update = {}\n            for (let i = 0, n = choosen_projections.length; i < n; ++i) {\n                update[`settings.${choosen_dataset.key}.path_weights.${choosen_projections[i].key}`] = 1;                \n            }\n            client.auth.loginWithCredential(new stitch.AnonymousCredential())\n                .then(user => settings_collection.updateOne({}, {$inc: update}, { upsert : true }))\n                .catch(err => console.error(err)); */\n\n            /* client.auth.loginWithCredential(new stitch.AnonymousCredential())\n                .then(user => settings_collection.findOne({}))\n                .catch(err => console.error(err))\n                .then(d => settings = d.settings); */\n\n            data.sort_time = $sort_time;\n            data.color_time = $color_time;\n            data.image_time = $image_time;\n            data.finish_time = performance.now();\n            data.dataset = $projections.map(p => {\n                return {\n                    \"name\": p.name,\n                    \"pos\": p.pos_count,\n                    \"neg\": p.neg_count,\n                    \"comment\": p.comment,\n                    \"position\": p.position,\n                    \"click_enlarge\": p.click_enlarge,\n                    \"star_time\": p.star_time\n                }\n            });\n            step = 'debrief'\n        }\n    };\n\n    let trial_feedback = {\n        type: 'survey-multi-choice',\n        questions: [\n            {\n                prompt: \"<div class='text-block'> <b>How difficult was this trial? </b></div>\",\n                options: ['Very Easy', 'Easy', 'Medium', 'Hard', 'Very difficult', 'I was confused the entire time'],\n                horizontal: true,\n                required: false,\n                name: 'difficulty'\n            }\n        ]\n    };\n\n    var trial_comment = {\n        type: 'survey-text',\n        questions: [\n            {\n                prompt: '<div class=\\\"text-block\\\">What criteria did you use for your ratings? (Answer only if the answer is different to before)</div>',\n                columns: 80,\n                rows: 5,\n                required: false,\n                name: 'Name'\n            },\n        ],\n        randomize_question_order: false,\n        prompt: \"<br><br>\",\n        on_finish: function() {\n            step='progress';\n        }\n    };\n\n    //\n    var cont = {\n        type: \"html-button-response\",\n        stimulus: \"Another round? <br> \",\n        choices: ['Continue to advance <img src=\"./images/healthcare-and-medical.svg\" alt=\"science\" height=\"15px\"> & <img src=\"./images/tech.svg\" alt=\"technology\" height=\"15px\"> ! <img src=\"./images/trophy.svg\" alt=\"\" height=\"15px\">', 'End experiment <img src=\"./images/emoji.svg\" alt=\":(\" height=\"15px\"> <img src=\"./images/smiley.svg\" alt=\":(\" height=\"15px\">'],\n        prompt: \"<br><br>\"\n\n    };\n\n\n\n    var loop_node = {\n        timeline: [dr_grid, trial_feedback, trial_comment,  cont],\n        loop_function: function (data) {\n                console.log(cont);\n\n\n                if (data.values()[3].button_pressed === '0' && counts < 12) {\n                    counts++;\n                    //console.log(counts);\n                    return true;\n                } else {\n                    step = \"debrief\";\n                    return false;\n                }\n            }\n    }\n\n    var debrief = {\n        type: 'survey-multi-choice',\n        questions: [\n            {\n                prompt: \"<div class='text-block'> <b>How difficult was the experiment as a whole? </b></div>\",\n                options: ['Very Easy', 'Easy', 'Medium', 'Hard', 'Very difficult', 'I was confused the entire time'],\n                horizontal: true,\n                required: true,\n                name: 'difficulty'\n            },\n            {\n                prompt: \"<div class='text-block'> <b>Do you think you improved at doing the tasks over time?</b></div>\",\n                options: ['Yes', 'No', 'I don\\'t know'],\n                horizontal: true,\n                required: true,\n                name: 'learning'\n            },\n            {\n                prompt: \"<div class='text-block'> <b>Did you experience different degrees of difficulty based on the dataset?</b></div>\",\n                options: ['Yes', 'No', 'I don\\'t know'],\n                horizontal: true,\n                required: true,\n                name: 'learning'\n            }\n        ]\n    };\n\n    var comments = {\n        type: 'survey-text',\n        questions: [\n            {\n                prompt: '<div class=\\\"text-block\\\">Do you have any other comments or feedback? </div>',\n                columns: 80,\n                rows: 5, \n                required: true, \n                name: 'Name'\n            },\n        ],\n        randomize_question_order: false,\n        prompt: \"<br><br>\"\n    };\n\n\n    onMount(() => {\n        jsPsych.init({\n            display_element: 'task',\n            exclusions: {\n                min_width: 700,\n                min_height: 400\n            },\n            on_trial_start: data => {\n            },\n            on_interaction_data_update: data => {\n                //console.log(JSON.stringify(data))\n            },\n            show_progress_bar: true,\n            auto_update_progress_bar: true,\n            timeline: [welcome_block,\n                consent,\n                instructions, name, experience,\n                loop_node, debrief, comments],\n            on_finish: function(D) {\n                // record proportion correct as unstructured data\n                // console.log('yo yo', D);\n                step = \"finish\";\n                client.auth.loginWithCredential(new stitch.AnonymousCredential())\n                    .then(user =>\n                        results.insertOne({owner_id: client.auth.user.id, result: jsPsych.data.get().values()})\n                    ).catch(err => {\n                        console.error(err)\n                    });\n                // jsPsych.data.displayData();\n                // console.log(jsPsych.data.get().values());\n            },\n        });\n    });\n\n    let tooltip\n</script>\n\n<nav>\n    <h2 style=\"display: inline-block;\"><img src=\"./images/favicon.png\" height=\"24px\" alt=\"\" /> DumbleDR</h2>\n    <div style=\"float:right; padding: .5rem;\">\n        <img src=\"./images/visus.png\" height=\"48px\" alt=\"visus\" />\n        <img src=\"./images/logo-precise.png\" height=\"48px\" alt=\"precise\" />\n    </div>\n</nav>\n  \n{#if $hover}\n<div\n    id=\"tooltip\" \n    transition:scale={{duration: 350}}\n    class=\"tooltip\" \n    style=\"position: absolute; z-index: 10000; visibility: {$hover ? null : 'hidden'}; pointer-events: none\" \n    bind:this={tooltip}>\n    <div class=\"tooltiptext\">\n        <img src=\"{`data/${$dataset}/thumbnails/${$images[$hover]}.png`}\" alt=\"{$hover}\" width=\"60px\" height=\"60px\" />\n    </div>\n</div>\n{/if}\n<main id=\"task\" style=\"max-width: {cols * 250 + (cols + 1) * 10}px;\">\n    {#if step == \"dr_grid\"}\n        <div class='jspsych-display-element'>\n        {#if $ready}\n            <div>\n                <Trial tooltip={tooltip}></Trial>  \n            </div>\n<!--            <p>Press <key>Enter</key> to continue.</p>      -->\n        {:else}\n            <div class=\"loader\"></div>\n            <center>Loading...</center>\n        {/if}\n        </div>\n    {:else if step == \"finish\"}\n        <div class='jspsych-display-element'>\n            <p>Study had completed. Your participant ID is {subject_id}.</p>\n            <p>If you ever want the data you provided to be deleted you may contact: cristina.morariu@visus.uni-stuttgart.de or\n                datenschutz@uni-stuttgart.de by providing this ID. </p>\n            <p>If you lose this ID, the data will no longer be identifiable to you.</p>\n\n            <iframe src=\"https://giphy.com/embed/AOrThUuuOoDCg\" width=\"480\" height=\"285\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen style=\"margin: auto;\" title=\"Dumbledore is pleased!\"></iframe><p><a href=\"https://giphy.com/gifs/harry-potter-applause-AOrThUuuOoDCg\">via GIPHY</a></p>\n            <h1><span class=\"mdi mdi-spin mdi-arm-flex\"></span>Lots of thanks!!<span class=\"mdi mdi-spin mdi-heart\"></span></h1>\n        </div>\n\n\n    {:else if step == \"debrief\"}\n        <div class='jspsych-display-element'>\n\n        </div>\n    {:else if step == \"progress\"}\n        <div class='jspsych-display-element'>\n        <p>You have done {counts} / 12 rounds.<br>*The experiment will end after 12 rounds, regardless of the choice.</p>\n        </div>\n    {/if}\n\n</main>\n\n<style>\n    :global(body) {\n        padding: 0;\n        font-family: \"Inter\", sans-serif !important;\n        position: relative;\n    }\n\n    :global(label) {\n        display: initial;\n        padding-left: .4em;\n    }\n\n    :global(p.survey-multi-choice) {\n        float: left;\n        margin: 0px 1em 0px 0px;\n    }\n\n    nav {\n        background-color: #f0f0f0;\n        padding: 0;\n        margin: 0;\n    }\n\n    nav h2 {\n        padding: 1rem;\n        margin: 0;\n    }\n\n    main {\n        margin: auto;\n        text-align: center;\n    }\n\n    .tooltip {\n        pointer-events: none;\n        position: relative;\n        display: inline-block;\n    }\n\n    .tooltip .tooltiptext {\n        position: absolute;\n        background-color: #fff;\n        color: #fff;\n        text-align: center;\n        padding: 0;\n        margin: 0;\n        border-radius: 3px;\n        border: 2px solid #333;\n        width: 60px;\n        height: 60px;\n        bottom: 5px;\n        left: 50%;\n        margin-left: -30px;\n    }\n\n    .tooltip .tooltiptext img {\n        border-radius: 3px;\n    }\n\n    .tooltip .tooltiptext::after {\n        content: \" \";\n        position: absolute;\n        top: 100%; /* At the bottom of the tooltip */\n        left: 50%;\n        margin-left: -5px;\n        border-width: 5px;\n        border-style: solid;\n        border-color: #333 transparent transparent transparent;\n    }\n\n    .loader {\n        font-size: 10px;\n        margin: 50px auto;\n        text-indent: -9999em;\n        width: 11em;\n        height: 11em;\n        border-radius: 50%;\n        background: lightgrey;\n        background: -moz-linear-gradient(left, lightgrey 10%, rgba(161,161,161, 0) 42%);\n        background: -webkit-linear-gradient(left, lightgrey 10%, rgba(161,161,161, 0) 42%);\n        background: -o-linear-gradient(left, lightgrey 10%, rgba(161,161,161, 0) 42%);\n        background: -ms-linear-gradient(left, lightgrey 10%, rgba(161,161,161, 0) 42%);\n        background: linear-gradient(to right, lightgrey 10%, rgba(161,161,161, 0) 42%);\n        position: relative;\n        -webkit-animation: load3 1.4s infinite linear;\n        animation: load3 1.4s infinite linear;\n        -webkit-transform: translateZ(0);\n        -ms-transform: translateZ(0);\n        transform: translateZ(0);\n    }\n\n    .loader:before {\n        width: 50%;\n        height: 50%;\n        background: white;\n        border-radius: 100% 0 0 0;\n        position: absolute;\n        top: 0;\n        left: 0;\n        content: '';\n    }\n\n    .loader:after {\n        background: white;\n        width: 75%;\n        height: 75%;\n        border-radius: 50%;\n        content: '';\n        margin: auto;\n        position: absolute;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        right: 0;\n    }\n\n    @keyframes load3 {\n        0% {\n            transform: rotate(0deg);\n        }\n        100% {\n            transform: rotate(360deg);\n        }\n    }\n\n    .description {\n        color: #333;\n    }\n\n    .jspsych-display-element {\n        overflow: visible;\n    }\n\n    \n</style>\n\n",
    "<script>\n\n    import { pos_count } from \"./stores.js\";\n    export let count;\n    export let projection;\n\n    export let max = 5;\n    export let neg = true;\n    export let bad = false;\n    \n    let values = new Array(max).fill(false)\n    export let symbol_filled = \"mdi-heart\";\n    export let symbol_unfilled = \"mdi-heart-outline\";\n    export let symbol_neg = \"mdi-heart-off\";\n    export let symbol_neg_unfilled = \"mdi-heart-off-outline\";\n\n    function update(c) {\n        values = values.map((_, i) => i < count)\n        projection.star_time.push({\"time\": performance.now(), 'rating': count})\n        // console.log(projection.star_time);\n    }\n    $: update(count)\n    \n    let hover = null\n</script>\n\n{#if neg}\n<span \n    class={\"mdi \" + (bad || hover == \"neg\" ? symbol_neg : symbol_neg_unfilled)}\n    class:hover={hover == \"neg\"}\n    on:click={() => {\n        pos_count.set($pos_count + count)\n        count = 0;\n        values = values.map((_, i) => false)\n        bad = !bad\n    }}\n    on:mouseenter={() => hover = \"neg\"}\n    on:mouseleave={() => hover = null}\n    title={`bad projection`}>\n</span>{/if}\n{#each values as v, i}\n    <span \n        class={\"mdi \" + (v || hover > i ? symbol_filled : symbol_unfilled)}\n        class:disabled={(i - count) >= $pos_count && !v}\n        class:hover={hover > i}\n        on:click={() => {\n            if ((i - count) >= $pos_count && !v) return;\n            const val = i + 1\n            pos_count.set($pos_count + count - val)\n            count = val;\n            bad = false;\n            values = values.map((_, i) => i < val)\n        }}\n        on:mouseenter={() => hover = i + 1}\n        on:mouseleave={() => hover = null}\n        title={`give ${i + 1} points`}>\n    </span>\n{/each}\n\n<style>\n    .disabled {\n        color: lightgray;\n    }\n\n    .hover {\n        color: red;\n    }\n</style>",
    "<script>\n    import { color_time, image_time, projections, data, pos_count, neg_count, hover, images, vis_type, ready, progress, colorScale } from \"./stores.js\";\n    import { debounce } from \"lodash\";\n\timport { flip } from 'svelte/animate';\n    import { quintOut } from 'svelte/easing';\n    import { scale, fade } from \"svelte/transition\";\n    import Vis from \"./Vis.svelte\";\n    import Star from \"./Star.svelte\";\n    \n    let width = 250;\n    let height = 250;\n    let margin = 20;\n    export let tooltip;\n\n    $: classes = Array.from(new Set($projections[0].map(d => d.class)))\n    let available_points = new Array(15).fill(false)\n\n    function update(c) {\n        available_points = available_points.map((_, i) => i < $pos_count);\n    }\n    $: update($pos_count);\n\n\n</script>\n<section>\n    <header>\n        <span>show datapoints as: </span>\n        <form on:change={() => {\n            if($vis_type =='circle'){\n                $color_time.push(performance.now())\n            }\n            else{ $image_time.push(performance.now()) }\n        }}>\n                <input type=\"radio\" bind:group={$vis_type} value=\"image\"> Image\n                <input type=\"radio\" bind:group={$vis_type} value=\"circle\"> Circles\n\n        </form>\n        <!-- <span>available points: </span><span class=\"mdi mdi-thumb-up\"></span><span style=\"color: green;\">{$pos_count}</span>\n        <span class=\"mdi mdi-thumb-down\"></span><span style=\"color: orangered;\">{$neg_count}</span><br> -->\n        available points: {#each available_points as a}\n            <span class=\"mdi\" class:mdi-heart={a} class:mdi-heart-outline={!a}></span>\n        {/each}\n        <br>\n        <button on:click={() => {\n            data.sort_by_pos()\n        }}><span class=\"mdi mdi-sort\"></span> Sort</button>\n        {#if $vis_type == \"circle\"}\n\n            <small style=\"display: flex; justify-content: center;\">\n                {#each classes as c}\n                    <div transition:fade style=\"display: inline-block; padding: 0px .4rem;\"><span style=\"color: {$colorScale(c)}\">•</span> {c}</div>\n                {/each}\n            </small>\n        {/if}\n    </header>\n    <div class=\"vis_list\">\n        {#if $ready}\n            {#each $projections as p, i (p)}\n            <div   \n                style=\"margin: 0px;\"\n                animate:flip={{duration: 650, easing: quintOut}}>\n                <!-- on:mouseleave={() => debounce(() => data.sort_by_pos(), 650)()} -->\n                <Vis \n                    tooltip={tooltip}\n                    data={p}\n                    width={width}\n                    height={height}\n                    margin={margin}>\n                </Vis>\n            </div>\n            {/each}\n        {/if}\n    </div>\n\n\n</section>\n\n<style>\n    .vis_list {\n        display: flex;\n        flex-wrap: wrap;\n        position: relative;\n    }\n\n    header {\n        border-top: 1px solid lightgrey;\n        border-bottom: 1px solid lightgrey;\n        padding: 0.8rem 0px;\n        margin-top: 0.8rem;\n    }\n\n\n\n</style>",
    "<script>\n    import { onMount } from \"svelte\"\n    import { scale, fly } from \"svelte/transition\"\n    import { dataset, images, colorScale, bgScale, hover, data as D, pos_count, neg_count, vis_type } from \"./stores.js\";\n    import * as d3 from \"d3\";\n    import { Delaunay } from \"d3-delaunay\";import { createEventDispatcher } from 'svelte';\n\n\n\tconst dispatch = createEventDispatcher();\n\n    import Name from \"./Name.svelte\";\n    import Star from \"./Star.svelte\";\n\n    export let data;\n    export let width;\n    export let height;\n    export let margin;\n    export let tooltip;\n    export let button = true;\n    \n    //let prog = 0;\n\n    $: image_elements = [];\n    $: image_promises = image_elements.map((img,i) => {\n        if (!img) return \"done\"\n        return img.decode().then(() => image_promises[i] = \"done\").catch(() => image_promises[i] = \"done\")\n    })\n    $: prog = image_promises.reduce((a, b) => a + (b == \"done\" ? 1 : 0), 0) / image_promises.length;\n    \n    $: [x, y] = [d3.scaleLinear(), d3.scaleLinear()];\n    $: voronoi = Delaunay.from(data, d => x(d.x), d => y(d.y)).voronoi([0, 0, Math.max(1,width || 1), Math.max(1, height || 1)])\n    $: x.range([margin, width - margin])\n    $: y.range([height - margin, margin])\n    $: [x_domain, y_domain] = domains(data)\n    $: x.domain(x_domain)\n    $: y.domain(y_domain)\n\n    function domains(data) {\n        let [x_min, x_max] = d3.extent(data, d => d.x)\n        let [y_min, y_max] = d3.extent(data, d => d.y)\n\n        const x_span = x_max - x_min;\n        const y_span = y_max - y_min;\n\n        const o = Math.abs(x_span - y_span) / 2;\n        if (x_span > y_span) {\n            y_min -= o;\n            y_max += o\n        } else {\n            x_min -= o;\n            x_max += o;\n        }\n\n        return [[x_min, x_max], [y_min, y_max]];\n    }\n\n    let g;\n    let g2;\n    let zoom = d3.zoom()\n\n    onMount(() => {\n        d3.select(g).call(zoom.extent([[0, 0], [width, height]])\n            .scaleExtent([1, 8])\n            .on(\"zoom\", zoomed))\n        d3.select(g2).call(zoom.extent([[0, 0], [width * 3, height * 3]])\n            .scaleExtent([1, 8])\n            .on(\"zoom\", zoomed))\n    })\n\n    function zoomed() {\n        let {k, x, y} = d3.event.transform\n        is_zoomed = !(k == 1 && x == 0 && y == 0);\n        d3.select(this).attr(\"transform\", d3.event.transform);\n    } \n\n    let is_zoomed = false;\n    let open_dialog = false;\n    let dialog;\n\n    function callbackFunction(event) {\n        open_dialog = false;\n    }\n\n    $: big_size = Math.min(window.innerHeight, window.innerWidth) *.95 - 40; // -40 padding\n\n    let comment_menu;\n</script>\n\n<div class=\"card\" style=\"background-color: {$bgScale(-data.pos_count + data.neg_count)};\">\n    {#if prog != 1}\n    <div id=\"progressbar\" style=\"width: {width -10}px\" out:fly>\n        <div id=\"bar\" style=\"width: {prog * 100}%;\"></div>\n    </div>\n    {/if}\n    <small style=\"position: absolute; top: 5px; right: 5px;\" >\n        <button \n            disabled={!is_zoomed}\n            title=\"reset zoom\"\n            on:click={() => {\n                data.click_enlarge.push(performance.now())\n                d3.select(g)\n                    .transition()\n                    .duration(350)\n                    .call(zoom.transform, d3.zoomIdentity)\n        }}>\n            <span class=\"mdi mdi-magnify-scan\"></span>\n        </button>\n        {#if button}\n        <button\n            title=\"expand\"\n            on:click={() => {\n                data.click_enlarge.push(performance.now())\n                open_dialog = !open_dialog\n            }}\n            >\n            <span class=\"mdi\"\n                class:mdi-arrow-expand={!open_dialog}\n                class:mdi-arrow-collapse={open_dialog}></span>\n        </button>\n        {:else}\n            <button on:click={() => dispatch(\"close\")}><span class=\"mdi mdi-close\"></span> Close</button>\n        {/if}\n    </small>\n    <!-- <h5><Name string={data.name.slice(26).slice(0, -4)}></Name></h5> -->\n    <svg \n        width={width} \n        height={height} \n        on:mouseleave={() => D.set_hover(null)}\n        >\n        <defs>\n            <filter id=\"matrix\">\n                <feColorMatrix type=\"matrix\" in=\"SourceGraphic\" \n                    values=\"0.1 0 0 0 0\n                            0 0.8 0 0 0\n                            0 0 1.7 0 0\n                            0 0 0 1 0 \"/>\n            </filter>\n        </defs>\n        <g bind:this={g}>\n        {#each data as point, i}\n            {#if voronoi.cellPolygon(i)}\n                <path \n                    d={`M${voronoi.cellPolygon(i).join(\"L\")}Z`}\n                    fill=\"transparent\"\n                    on:mouseenter={(event) => {\n                        D.set_hover(i)\n                    }}\n                    on:mousemove={(event) => {\n                        const tooltip = document.getElementById(\"tooltip\")\n                        if (tooltip) {\n                            tooltip.style.left = event.pageX + \"px\";\n                            tooltip.style.top = event.pageY + \"px\";\n                        }\n                    }}\n                    title={point.class}\n                    >\n                </path>\n            {/if}\n            <g transform={`translate(${x(point.x) - 10}, ${y(point.y) - 10})`}>\n                {#if $vis_type == \"image\"}\n                    <image \n                        bind:this={image_elements[i]}\n                        style=\"pointer-events: none;\"\n                        href={`data/${$dataset}/thumbnails/${point.img}.png`}\n                        width=20 height=20 \n                        filter={i == $hover ? \"url(#matrix)\" : null} \n                        title={point.class}\n                        >\n                    </image>\n                {:else if $vis_type == \"circle\"}\n                    <circle\n                        cx=10\n                        cy=10\n                        r={$hover == i ? 5 : 3}\n                        fill={$hover == i ? $colorScale(point.class) : \"none\"}\n                        stroke={$colorScale(point.class)}\n                    ></circle>\n                {/if}\n            </g>\n        {/each}\n        {#if $vis_type == \"image\"}\n        {#each data.filter((d, i) => $hover == i) as point, i}\n            <g transform={`translate(${x(point.x) - 10}, ${y(point.y) - 10})`}>\n                <image \n                    style=\"pointer-events: none;\"\n                    xlink:href={`data/${$dataset}/thumbnails/${point.img}.png`}\n                    width=20 height=20 \n                    filter=\"url(#matrix)\"\n                    title={point.class}\n                    >\n                </image>\n            </g>\n        {/each}\n        {/if}\n        </g>\n    </svg>\n    <div style=\"text-align: center;\">\n        <div style=\"text-align: left\">  \n            Rate:\n            <Star bind:count={data.pos_count} bind:bad={data.neg_count} bind:projection={data} max={4}></Star>\n\n        </div>\n    </div>\n\n    <small style=\"position: absolute; bottom: 0px; right: 5px;\">\n        <div class:active={comment_menu} class=\"dropdown\" >\n            <button on:click={() => comment_menu = true}>\n                <span class=\"mdi mdi-comment-text-outline\"></span>\n            </button>\n            <div class=\"comment dropdown-content\">\n                Comments:\n                <button style=\"float:right;\" on:click={() => comment_menu = false}><span class=\"mdi mdi-check\" /></button>\n                <textarea \n                    bind:value={data.comment} \n                    on:key={(event) => event.preventDefault()} />\n            </div>\n            \n        </div>\n    </small>\n\n    {#if open_dialog}\n    <div id=\"modal\" class=\"modal\">\n        <div class=\"modal-content\" style=\"width: fit-content;\">\n            <svelte:self \n                on:close=\"{callbackFunction}\" \n                bind:data={data} \n                width={big_size} \n                height={big_size} \n                margin={margin} \n                tooltip={tooltip} \n                button={false}>\n            </svelte:self>\n        </div>\n    </div>\n    {/if}\n\n    <!-- <div bind:this={dialog} class=\"modal\" style=\"position: absolute; visibility: {open_dialog ? null : \"hidden\"}\" transition:scale>\n        <div>\n            <svg \n                width={width * 3} \n                height={height * 3} \n                on:mouseleave={() => D.set_hover(null)}\n                >\n                <defs>\n                    <filter id=\"matrix\">\n                        <feColorMatrix type=\"matrix\" in=\"SourceGraphic\" \n                            values=\"0.1 0 0 0 0\n                                    0 0.8 0 0 0\n                                    0 0 1.7 0 0\n                                    0 0 0 1 0 \"/>\n                    </filter>\n                </defs>\n                <g bind:this={g2}>\n                    {#each data as point, i}\n                        {#if open_dialog}\n                        {#if voronoi.cellPolygon(i)}\n                            <path \n                                d={`M${voronoi.cellPolygon(i).map(d => d.map(d => d*3)).join(\"L\")}Z`}\n                                fill=\"transparent\"\n                                on:mouseenter={(event) => {\n                                    D.set_hover(i)\n                                }}\n                                on:mousemove={(event) => {\n                                    const tooltip = document.getElementById(\"tooltip\")\n                                    if (tooltip) {\n                                        tooltip.style.left = event.pageX + \"px\";\n                                        tooltip.style.top = event.pageY + \"px\";\n                                    }\n                                }}\n                                title={point.class}\n                                >\n                            </path>\n                        {/if}\n                        <g transform={`translate(${x(point.x) * 3 - 20}, ${y(point.y) * 3 - 20})`}>\n                            {#if $vis_type == \"image\"}\n                                <image \n                                    bind:this={image_elements[i]}\n                                    style=\"pointer-events: none;\"\n                                    href={`data/thumbnails/size50/${point.img}.png`}\n                                    width=40 height=40 \n                                    filter={i == $hover ? \"url(#matrix)\" : null} \n                                    title={point.class}\n                                    >\n                                </image>\n                            {:else if $vis_type == \"circle\"}\n                                <circle\n                                    cx=10\n                                    cy=10\n                                    r={$hover == i ? 5 : 3}\n                                    fill={$hover == i ? $colorScale(point.class) : \"none\"}\n                                    stroke={$colorScale(point.class)}\n                                ></circle>\n                            {/if}\n                        </g>\n                        {/if}\n                    {/each}\n                    {#if $vis_type == \"image\"}\n                        {#each data.filter((d, i) => $hover == i) as point, i}\n                            <g transform={`translate(${x(point.x) * 3 - 40}, ${y(point.y) * 3 - 40})`}>\n                                <image \n                                    style=\"pointer-events: none;\"\n                                    xlink:href={`data/thumbnails/size50/${point.img}.png`}\n                                    width=80 height=80 \n                                    filter=\"url(#matrix)\"\n                                    title={point.class}\n                                    >\n                                </image>\n                            </g>\n                        {/each}\n                    {/if}\n                </g>\n            </svg>\n        </div>\n        <div>\n            <button style=\"float: right; text-transform: uppercase;\" on:click={() => open_dialog = false}><span class=\"mdi mdi-close\"></span> Close</button>\n        </div>\n    </div> -->\n</div>\n\n\n<style>\n\n    .card {\n        position: relative;\n        margin: 5px;\n        border: 1px solid lightgrey;\n        border-radius: 4px;\n        padding: 5px;\n        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);\n        transition: all 0.3s cubic-bezier(.25,.8,.25,1);\n    }\n\n    h5 {\n        text-align: left;\n        margin: 0 !important;\n        padding-bottom: .875rem;\n    }\n\n    .card:hover {\n        box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n    }\n\n    svg {\n        background-color: white;\n        margin: -5px;\n        /* <border-top: 1px solid lightgrey;\n        border-bottom: 1px solid lightgrey;> */\n    }\n\n    #progressbar {\n        position: absolute;\n        top: 0;\n        left: 0;\n        margin: 0;\n        background-color: white;\n        overflow: hidden;\n    }\n\n    #bar {\n        height: 5px;\n        background-color: grey;\n        text-align: center;\n        line-height: 5px;\n        color: white;\n        overflow: hidden;\n    }\n\n    .modal {\n        position: fixed; /* Stay in place */\n        z-index: 1; /* Sit on top */\n        left: 0;\n        top: 0;\n        width: 100%; /* Full width */\n        height: 100%; /* Full height */\n        overflow: hidden; /* Enable scroll if needed */\n        background-color: rgb(0,0,0); /* Fallback color */\n        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n    }\n\n        /* Modal Content/Box */\n    .modal-content {\n        margin: auto;\n        padding: 20px;\n    }\n\n    .dropdown {\n        position: relative;\n        display: inline-block;\n        overflow: visible !important;\n    }\n\n    .dropdown-content {\n        z-index: 1;\n        display: none;\n        position: absolute;\n        min-width: 160px;\n        background-color: white;\n        border: 1px solid lightgrey;\n        border-radius: 4px;\n        padding: 5px;\n        box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n        transition: all 0.3s cubic-bezier(.25,.8,.25,1);\n    }\n\n    .dropdown.active .dropdown-content {\n        display: block;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "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"
}